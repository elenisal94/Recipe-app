<% layout('layouts/boilerplate')%>

    <div class="row">
        <h1 class="text-center">Edit Recipe</h1>
        <div class="col-10 offset-1">
            <form id="recipeForm" action="/recipes/<%=recipe._id%>?_method=PUT" method="POST" novalidate
                class="validated-form">
                <div class="mb-3">
                    <h3>General Info</h3>
                    <label class="form-label" for="title">Recipe name:</label>
                    <div class="col-12 col-sm-10 col-md-5 col-xl-4">
                        <input class="form-control" type="text" id="title" name="recipe[title]"
                            placeholder="e.g. Divine turkey steak" value="<%=recipe.title%>" required>
                        <div class="valid-feedback">
                            Looks good!
                        </div>
                        <div class="invalid-feedback">
                            Please provide a recipe name
                        </div>
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label" for="description">Briefly describe this recipe (4 sentences max.):</label>
                    <div><textarea class="form-control" id="description" name="recipe[description]" rows="5" cols="50"
                            maxlength="1300" required
                            placeholder="e.g. Savor the delicious combination of expertly seasoned pan-seared turkey steaks paired with al dente garlic Parmesan pasta. This quick and flavorful recipe is a perfect choice for a delightful and satisfying dinner."><%= recipe.description %></textarea>
                        <div class="valid-feedback">
                            Looks good!
                        </div>
                        <div class="invalid-feedback">
                            Please provide a brief description
                        </div>
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label" for="country">Recipe origin country:</label>
                    <select class="form-select" name="recipe[countryCode]" id="country" required>
                        <% Object.entries(countryInfoData).forEach(([code, country])=> { %>
                            <option value="<%= code %>" <%=code===recipe.countryCode ? ' selected' : '' %>>
                                <%= country.countryFullname %>
                                    <%= country.countryFlag %>
                            </option>
                            <% }); %>
                    </select>
                    <div class="valid-feedback">
                        Looks good!
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label" for="image">Recipe image URL:</label>
                    <input class="form-control" type="url" id="image" name="recipe[image]" value="<%=recipe.image%>"
                        required>
                    <div class="valid-feedback">
                        Looks good!
                    </div>
                    <div class="invalid-feedback">
                        Please provide a valid URL
                    </div>
                </div>

                <div class="mb-3">
                    <p>Preparation time:</p>
                    <div class="row g-1">
                        <div class="col-3 col-sm-3 col-lg-2 col-xl-2">
                            <select class="form-select text-center" id="prepHours" name="recipe[prepHours]">
                                <% if (recipe.prepHours===null) { %>
                                    <option value="" selected>-</option>
                                    <% for (let i=1; i <=48; i++) { %>
                                        <option value="<%= i %>">
                                            <%= i %>
                                        </option>
                                        <% } } else { %>
                                            <option value="">-</option>
                                            <% for (let i=1; i <=48; i++) { %>
                                                <option value="<%= i %>" <%=recipe.prepHours===i ? 'selected' : '' %>>
                                                    <%= i %>
                                                </option>
                                                <% }} %>
                            </select>
                        </div>
                        <div class="col-2 col-sm-2 col-lg-1 text-start mt-3 ml-0 pl-0">
                            <label class="form-label" for="prepHours">hours</label>
                        </div>
                        <div class="col-3 col-sm-3 col-lg-2 col-xl-2">
                            <select class="form-select text-center" id="prepMinutes" name="recipe[prepMinutes]"
                                placeholder="minutes">
                                <% if (recipe.prepMinutes===null) { %>
                                    <option value="" selected>-</option>
                                    <% for (let i=5; i <=55; i +=5) { %>
                                        <option value="<%= i %>">
                                            <%= i %>
                                        </option>
                                        <% } } else { %>
                                            <option value="">-</option>
                                            <% for (let i=5; i <=55; i +=5) { %>
                                                <option value="<%= i %>" <%=recipe.prepMinutes===i ? 'selected' : '' %>>
                                                    <%= i %>
                                                </option>
                                                <% } } %>
                            </select>
                        </div>
                        <div class="col-3 col-sm-2 col-lg-1 text-start mt-3 ml-0 pl-0">
                            <label class="form-label" for="prepMinutes">minutes</label>
                        </div>
                        <div id="prepTimeValidation" class="">
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label" for="serves">Serves (number of people):</label>
                    <div class="col-5 col-lg-2 col-xl-2">
                        <select class="form-select text-center" id="serves" name="recipe[serves]" required>
                            <option value="">-</option>
                            <% for (let i=1; i <=15; i++) { %>
                                <option value="<%= i %>" <%=recipe.serves===i ? 'selected' : '' %>>
                                    <%= i %>
                                </option>
                                <% } %>
                        </select>
                        <div class="valid-feedback">
                            Looks good!
                        </div>
                        <div class="invalid-feedback">
                            Please select a number
                        </div>
                    </div>
                </div>

                <div class="mb-4">
                    <h3>Ingredients</h3>
                    <label class="form-label" aria-label="Disabled select example" for="preferredSystem">1. Preferred
                        measurement system:</label>
                    <div class="col-9 col-sm-6 col-md-4 col-xl-3">
                        <select class="form-select" name="preferredSystem" id="preferredSystem"
                            onchange="UpdateHiddenInput()">
                            <option value="metric" <%=recipe.measurementSystem==='metric' ? 'selected' : '' %>>Metric
                            </option>
                            <option value="imperial" <%=recipe.measurementSystem==='imperial' ? 'selected' : '' %>
                                >Imperial</option>
                        </select>
                    </div>
                    <input type="hidden" name="recipe[measurementSystem]" id="measurementSystemHidden">
                    <div class="mt-2">
                        <p>2. Recipe ingredients:</p>
                        <p class="small text-muted">Valid ingredient format: 0.5 kilograms potatoes, 3 apples, salt.
                            Please <b>do not</b> use fractions like 2/3 cups of flour.</p>
                    </div>
                    <div id="ingredientsContainer" class="row mb-3 list-group">
                        <!-- Ingredient input fields will be dynamically added here -->
                    </div>
                    <div id="ingredientsValidation" class="">
                        <!-- Ingredients Validation messages will be displayed here -->
                    </div>
                    <div id="metricIngredients"
                        data-metric-recipe-ingredients="<%= JSON.stringify(recipe.ingredients) %>">
                    </div>
                    <div id="imperialIngredients"
                        data-imperial-recipe-ingredients="<%= JSON.stringify(convertedIngredients) %>"></div>
                    <button type="button" class="btn btn-primary" onclick="addIngredient();">Add
                        Ingredient</button>
                </div>
                <div class="mb-4">
                    <h3>Method</h3>
                    <p>Recipe steps:</p>
                    <p class="small text-muted">Recommended format: Preheat oven at 150Â°C. Whilst the oven is warming up
                        chop the onions and potatoes.</p>
                    <div id="stepsContainer">
                        <!-- Steps input fields will be dynamically added here -->
                    </div>
                    <div id="recipeMethod" data-recipe-method="<%= JSON.stringify(recipe.method) %>"></div>
                    <div id="methodValidation" class="">
                        <!-- Method Validation messages will be displayed here -->
                    </div>
                    <button type="button" class="btn btn-primary" onclick="addStep()">Add Step</button>
                </div>
                <div class="my-3">
                    <button class="btn btn-success col-12 col-lg-3 offset-lg-5 mt-3" type="submit">Update
                        Recipe</button>
                </div>
            </form>
            <a href="/recipes/<%= recipe._id %>">Back to Recipe</a>
        </div>
    </div>

    <script>
        UpdateHiddenInput();

        function UpdateHiddenInput() {
            const selectedSystem = document.getElementById('preferredSystem').value;
            document.getElementById('measurementSystemHidden').value = selectedSystem
            console.log(document.getElementById('measurementSystemHidden').value)
        }

        document.addEventListener('DOMContentLoaded', () => {
            const preferredSystem = document.getElementById('preferredSystem').value;

            if (preferredSystem === 'metric') {
                const metricIngredientsData = document.getElementById('metricIngredients').dataset.metricRecipeIngredients;
                const metricIngredients = JSON.parse(metricIngredientsData);
                metricIngredients.forEach(ingredientData => {
                    addIngredient(ingredientData);
                });
            } else {
                const imperialIngredientsData = document.getElementById('imperialIngredients').dataset.imperialRecipeIngredients;
                const imperialIngredients = JSON.parse(imperialIngredientsData);
                imperialIngredients.forEach(ingredientData => {
                    addIngredient(ingredientData);
                    console.log('imperial ingredientData:', ingredientData)
                });
            }
        });

        let ingredientIndex = 0;
        function addIngredient(ingredientData = {}) {
            const container = document.getElementById('ingredientsContainer');
            const ingredientInputs = document.createElement('div');
            const preferredSystem = document.getElementById('preferredSystem');
            console.log('Imperial shorthand inside add ingredient:', ingredientData.measurementShorthand);
            const metricUnits = [{ value: null, text: '-' },
            { value: "l", text: "liters" },
            { value: "g", text: "grams", },
            { value: "ml", text: "milliliters" },
            { value: "kg", text: "kilograms" },
            { value: "tsp", text: "teaspoons" },
            { value: "Tbs", text: "tablespoons" },
            { value: "cup", text: "cups" },
            { value: "mg", text: "milligrams" },
            ];
            const imperialUnits = [{ value: null, text: '-' },
            { value: "gal", text: "gallons" },
            { value: "oz", text: "ounces" },
            { value: "tsp", text: "teaspoons" },
            { value: "Tbs", text: "tablespoons" },
            { value: "cup", text: "cups" },
            { value: "qt", text: "quarts" },
            { value: "fl-oz", text: "fluid ounces" },
            { value: "lb", text: "pounds" },
            ];

            ingredientInputs.innerHTML = `
            <div class="list-group-item">
                <div class="row g-1">
                    <div class="col-12 col-lg-2 col-xl-1 text-sm-start text-lg-end">
                        <label class="form-label mt-2">Amount:</label>
                    </div>
                    <div class="col-12 col-lg-3 col-xl-2">
                        <input class="form-control" type="number" step="any" min="0" placeholder="-" name="recipe[ingredients][${ingredientIndex}][amount]" value="${ingredientData.amount || ''}">
                    </div>
                    <div class="col-12 col-lg-3 col-xl-1 text-sm-start text-lg-end">
                        <label class="form-label mt-2">Unit:</label>
                    </div>
                    <div class="col-12 col-lg-4 col-xl-2">
                        <select class="form-select" name="recipe[ingredients][${ingredientIndex}][measurementShorthand]">
                        ${preferredSystem.value === 'metric' ? metricUnits.map(unit => `<option value="${unit.value}" ${unit.value === ingredientData.measurementShorthand ? 'selected' : ''}>${unit.text}</option>`) :
                    imperialUnits.map(unit => `<option value="${unit.value}" ${unit.value === ingredientData.measurementShorthand ? 'selected' : ''}>${unit.text}</option>`)}
                        </select>
                    </div>
                    <div class="col-12 col-lg-3 col-xl-2 text-sm-start text-lg-end">
                        <label class="form-label mt-2">Ingredient name:</label>
                    </div>
                    <div class="col-12 col-lg-5 col-xl-3">
                        <input class="form-control text-lowercase" type="text" name="recipe[ingredients][${ingredientIndex}][ingredientName]" value="${ingredientData.ingredientName || ''}" required>
                    </div>
                    <div class= "col-12 col-lg-2 col-xl-1 mt-3 mt-md-1">
                        <button type="button" class="btn btn-danger" style="width: 100%;" onclick="deleteIngredient(this.parentNode.parentNode.parentNode); resetMeasurementSystem()">Delete</button>
                    </div>
                </div>
            </div>
            `;
            container.appendChild(ingredientInputs);
            ingredientIndex++;
            disableMeasurementSystem();
        }

        function disableMeasurementSystem() {
            const ingredientsContainer = document.getElementById('ingredientsContainer');
            const preferredSystem = document.getElementById('preferredSystem');
            if (ingredientsContainer.children.length > 0) {
                preferredSystem.disabled = true;
            }
        }

        function resetMeasurementSystem() {
            const ingredientsContainer = document.getElementById('ingredientsContainer');
            const measureSystemSelect = document.getElementById('preferredSystem');
            if (ingredientsContainer.children.length === 0) {
                measureSystemSelect.disabled = false;
            }
        }

        function deleteIngredient(button) {
            button.parentNode.remove();
        }

        document.addEventListener('DOMContentLoaded', () => {
            const container = document.getElementById('stepsContainer');
            if (container) {
                const recipeMethodElement = document.getElementById('recipeMethod');
                if (recipeMethodElement) {
                    const recipeMethodString = recipeMethodElement.getAttribute('data-recipe-method');
                    const recipeMethod = JSON.parse(recipeMethodString);

                    recipeMethod.forEach(step => {
                        addStep(step);
                    });
                }
            }
        });

        let stepIndex = 0;
        function addStep(stepText = '') {
            const container = document.getElementById('stepsContainer');
            const stepInput = document.createElement('div');
            stepInput.innerHTML = `
                <div class="row mb-2">
                    <div class="col-12 col-xl-1">
                        <label class="form-label mt-2">Step ${stepIndex + 1}:</label>
                    </div>
                    <div class="col-12 col-xl-10">
                        <textarea class="form-control" name="recipe[method][${stepIndex}]" rows="1" cols="50" required>${stepText}</textarea>
                    </div>
                    <div class="col-xl-1">
                        <button type="button" class="btn btn-danger float-end mt-2 mt-xl-0" onclick="deleteStep(this.parentNode.parentNode)">Delete</button>
                    </div>
                </div>
            `;
            container.appendChild(stepInput);
            stepIndex++;
        }

        function deleteStep(button) {
            const container = document.getElementById('stepsContainer');
            const steps = Array.from(container.children);
            const deletedIndex = steps.indexOf(button.parentNode);
            button.parentNode.remove();
            updateStepNumbers(deletedIndex);
        }

        function updateStepNumbers(deletedIndex) {
            const container = document.getElementById('stepsContainer');
            const steps = Array.from(container.children);
            steps.forEach((step, index) => {
                const label = step.querySelector('label');
                const textarea = step.querySelector('textarea');
                label.textContent = `Step ${index + 1}:`;
                textarea.name = `recipe[method][${index}]`;
            });
            if (deletedIndex !== undefined) {
                stepIndex = steps.length;
            }
        }

        function validatePreparationTime() {
            const prepHours = document.getElementById('prepHours').value;
            const prepMinutes = document.getElementById('prepMinutes').value;
            const prepTimeValidation = document.getElementById('prepTimeValidation');

            if (prepHours === '' && prepMinutes === '') {
                document.getElementById('prepHours').required = true;
                document.getElementById('prepMinutes').required = true;
                const invalidMessage = createMessage('invalidMessage', 'text-danger', 'Please provide a preparation time');
                prepTimeValidation.innerHTML = '';
                prepTimeValidation.appendChild(invalidMessage);
                return false;
            } else {
                document.getElementById('prepHours').required = false;
                document.getElementById('prepMinutes').required = false;

                const validMessage = createMessage('validMessage', 'text-success', 'Looks good!');
                prepTimeValidation.innerHTML = '';
                prepTimeValidation.appendChild(validMessage);
                return true;
            }
        }

        function validateIngredients() {
            const ingredientsContainer = document.getElementById('ingredientsContainer')
            const ingredientsValidation = document.getElementById('ingredientsValidation');
            if (ingredientsContainer.childElementCount === 0) {
                const invalidMessage = createMessage('invalidMessage', 'text-danger', 'Please add at least one ingredient to your recipe');
                ingredientsValidation.innerHTML = '';
                ingredientsValidation.appendChild(invalidMessage);
                return false;
            } else {
                ingredientsValidation.innerHTML = '';
                return true;
            }
        }

        function validateMethod() {
            const stepsContainer = document.getElementById('stepsContainer')
            const methodValidation = document.getElementById('methodValidation');
            if (stepsContainer.childElementCount === 0) {
                const invalidMessage = createMessage('invalidMessage', 'text-danger', 'Please add at least one step to your recipe method');
                methodValidation.innerHTML = '';
                methodValidation.appendChild(invalidMessage);
                return false;
            } else {
                methodValidation.innerHTML = '';
                return true;
            }
        }

        function createMessage(id, className, text) {
            const message = document.createElement('div');
            message.setAttribute('id', id);
            message.classList.add(className);
            message.innerHTML = `<small>${text}</small>`;
            return message;
        }


        document.addEventListener('DOMContentLoaded', function () {
            const prepHours = document.getElementById('prepHours');
            const prepMinutes = document.getElementById('prepMinutes');
            const ingredientsContainer = document.getElementById('ingredientsContainer')
            const stepsContainer = document.getElementById('stepsContainer')
            const recipeForm = document.getElementById('recipeForm');
            let formSubmitted = false;
            recipeForm.addEventListener('submit', function () { formSubmitted = true })

            function validateAndPreventSubmission(event) {
                validatePreparationTime();
                validateIngredients();
                validateMethod();
                if ((!validatePreparationTime()) || (!validateIngredients()) || (!validateMethod())) {
                    event.preventDefault();
                }
            }

            prepHours.addEventListener('change', function () {
                if (formSubmitted) {
                    validatePreparationTime();
                }
            });

            prepMinutes.addEventListener('change', function () {
                if (formSubmitted) {
                    validatePreparationTime();
                }
            });

            const observer = new MutationObserver(function (mutationsList, observer) {
                for (const mutation of mutationsList) {
                    if (mutation.type === 'childList' && formSubmitted) {
                        validateIngredients();
                        validateMethod();
                    }
                }
            });

            const observerConfig = { childList: true };

            observer.observe(ingredientsContainer, observerConfig);
            observer.observe(stepsContainer, observerConfig);

            recipeForm.addEventListener('submit', validateAndPreventSubmission);
        });

    </script>