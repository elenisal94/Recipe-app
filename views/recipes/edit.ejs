<% layout('layouts/boilerplate')%>

    <div class="row">
        <h1 class="text-center">Edit Recipe</h1>
        <div class="col-10 offset-1">
            <form id="recipeForm" action="/recipes/<%=recipe._id%>?_method=PUT" method="POST" novalidate
                class="validated-form" enctype="multipart/form-data">
                <div class="mb-4 pb-4">
                    <div class="mb-3">
                        <h3>General Info ü•ß</h3>
                        <label class="form-label" for="title">Recipe name:</label>
                        <div class="col-12 col-sm-10 col-md-5 col-xl-4">
                            <input class="form-control" type="text" id="title" name="recipe[title]"
                                placeholder="e.g. Divine turkey steak" value="<%=recipe.title%>" required>
                            <div class="valid-feedback">
                                Looks good!
                            </div>
                            <div class="invalid-feedback">
                                Please provide a recipe name
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label" for="description">Briefly describe this recipe (4 sentences
                            max.):</label>
                        <div><textarea class="form-control" id="description" name="recipe[description]" rows="5"
                                cols="50" maxlength="1300" required
                                placeholder="e.g. Savor the delicious combination of expertly seasoned pan-seared turkey steaks paired with al dente garlic Parmesan pasta. This quick and flavorful recipe is a perfect choice for a delightful and satisfying dinner."><%= recipe.description %></textarea>
                            <div class="valid-feedback">
                                Looks good!
                            </div>
                            <div class="invalid-feedback">
                                Please provide a brief description
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label" for="country">Recipe origin country:</label>
                        <select class="form-select" name="recipe[countryCode]" id="country" required>
                            <% Object.entries(countryInfoData).forEach(([code, country])=> { %>
                                <option value="<%= code %>" <%=code===recipe.countryCode ? ' selected' : '' %>>
                                    <%= country.countryFullname %>
                                        <%= country.countryFlag %>
                                </option>
                                <% }); %>
                        </select>
                        <div class="valid-feedback">
                            Looks good!
                        </div>
                    </div>

                    <div class="mb-3">
                        <p>Preparation time:</p>
                        <div class="row g-1">
                            <div class="col-6 col-sm-3 col-lg-2 col-xl-2">
                                <select class="form-select text-center" id="prepHours" name="recipe[prepHours]">
                                    <% if (recipe.prepHours===null) { %>
                                        <option value="" selected>-</option>
                                        <% for (let i=1; i <=48; i++) { %>
                                            <option value="<%= i %>">
                                                <%= i %>
                                            </option>
                                            <% } } else { %>
                                                <option value="">-</option>
                                                <% for (let i=1; i <=48; i++) { %>
                                                    <option value="<%= i %>" <%=recipe.prepHours===i ? 'selected' : ''
                                                        %>>
                                                        <%= i %>
                                                    </option>
                                                    <% }} %>
                                </select>
                            </div>
                            <div class="col-4 col-sm-2 col-lg-1 text-start mt-3 ml-0 pl-0">
                                <label class="form-label" for="prepHours">hours</label>
                            </div>
                            <div class="col-6 col-sm-3 col-lg-2 col-xl-2">
                                <select class="form-select text-center" id="prepMinutes" name="recipe[prepMinutes]"
                                    placeholder="minutes">
                                    <% if (recipe.prepMinutes===null) { %>
                                        <option value="" selected>-</option>
                                        <% for (let i=5; i <=55; i +=5) { %>
                                            <option value="<%= i %>">
                                                <%= i %>
                                            </option>
                                            <% } } else { %>
                                                <option value="">-</option>
                                                <% for (let i=5; i <=55; i +=5) { %>
                                                    <option value="<%= i %>" <%=recipe.prepMinutes===i ? 'selected' : ''
                                                        %>>
                                                        <%= i %>
                                                    </option>
                                                    <% } } %>
                                </select>
                            </div>
                            <div class="col-4 col-sm-2 col-lg-1 text-start mt-3 ml-0 pl-0">
                                <label class="form-label" for="prepMinutes">minutes</label>
                            </div>
                            <div id="prepTimeValidation" class="">
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label" for="serves">Serves (number of people):</label>
                        <div class="col-5 col-lg-2 col-xl-2">
                            <select class="form-select text-center" id="serves" name="recipe[serves]" required>
                                <option value="">-</option>
                                <% for (let i=1; i <=15; i++) { %>
                                    <option value="<%= i %>" <%=recipe.serves===i ? 'selected' : '' %>>
                                        <%= i %>
                                    </option>
                                    <% } %>
                            </select>
                            <div class="valid-feedback">
                                Looks good!
                            </div>
                            <div class="invalid-feedback">
                                Please select a number
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mb-4 pb-4">
                    <h3>Ingredients ü¶ë</h3>
                    <label class="form-label" aria-label="Disabled select example" for="preferredSystem">1. Preferred
                        measurement system:</label>
                    <div class="col-9 col-sm-6 col-md-4 col-xl-3">
                        <select class="form-select" name="preferredSystem" id="preferredSystem"
                            onchange="UpdateHiddenInput()">
                            <option value="metric" <%=(user.measurementSystem==='metric' ||
                                user.measurementSystem===null || user.measurementSystem===undefined) ? 'selected' : ''
                                %>>Metric
                            </option>
                            <option value="imperial" <%=user.measurementSystem==='imperial' ? 'selected' : '' %>
                                >Imperial</option>
                        </select>
                    </div>
                    <input type="hidden" name="recipe[measurementSystem]" id="measurementSystemHidden">
                    <div class="mt-2">
                        <p>2. Recipe ingredients:</p>
                        <p class="small text-muted">Valid ingredient format: 1 tablespoon oregano, 0.5 kilograms
                            potatoes, 3 apples, salt.
                            Please <b>do not</b> use fractions like '2/3 cups of flour'.</p>
                    </div>
                    <div id="ingredientsContainer" class="row mb-3 list-group">
                        <!-- Ingredient input fields will be dynamically added here -->
                    </div>
                    <div id="ingredientsValidation">
                        <!-- Ingredients Validation messages will be displayed here -->
                    </div>
                    <div id="metricIngredients"
                        data-metric-recipe-ingredients="<%= JSON.stringify(recipe.ingredients) %>">
                    </div>
                    <div id="imperialIngredients"
                        data-imperial-recipe-ingredients="<%= JSON.stringify(convertedIngredients) %>"></div>
                    <button type="button" class="btn btn-primary" onclick="addIngredient();">Add
                        Ingredient</button>
                </div>
                <div class="mb-4 pb-4">
                    <h3>Method ‚úèÔ∏è</h3>
                    <p>Recipe steps:</p>
                    <p class="small text-muted">Recommended format: Preheat oven at 150¬∞C. Whilst the oven is warming up
                        chop the onions and potatoes.</p>
                    <div id="stepsContainer">
                        <!-- Steps input fields will be dynamically added here -->
                    </div>
                    <div id="recipeMethod" data-recipe-method="<%= JSON.stringify(recipe.method) %>"></div>
                    <div id="methodValidation" class="">
                        <!-- Method Validation messages will be displayed here -->
                    </div>
                    <button type="button" class="btn btn-primary" onclick="addStep()">Add Step</button>
                </div>

                <div class="mb-4 pb-4">
                    <h3>Images üì∏</h3>
                    <div id="existingImagesContainer">
                        <p>Existing images:</p>
                        <div id="cardHolder" class="row row-cols-1 row-cols-lg-3 row-cols-md-2 g-4">
                            <% recipe.images.forEach(function(img, i){%>
                                <div class="col miniContainer">
                                    <div class="card h-100">
                                        <div class="card-body d-flex justify-content-center align-items-center h-75">
                                            <img src="<%=img.url %>" class="card-img img-thumbnail previewImage mx-auto"
                                                alt="<%=img.altText%>">
                                        </div>
                                        <div
                                            class="card-body d-flex flex-column justify-content-end align-items-center">
                                            <label for="altText<%=i%>" class="form-label"
                                                name="altTextLabel[<%=i%>]">Image
                                                <%=i +1 %>
                                                    description:
                                            </label>
                                            <input type="text" class="form-control" id="altText<%=i%>" maxlength="300"
                                                value="<%=img.altText%>" name="altText[<%=i%>]" required>
                                            <div class="form-check-inline mt-1 text">
                                                <input type="checkbox" class="btn-check" id="image-<%=i%>"
                                                    name="deleteImages[]" value="<%=img.filename %>">
                                                <label class="btn btn-danger" name="deleteImageButton"
                                                    for="image-<%=i%>">Delete</label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <% })%>
                        </div>
                    </div>
                    <div id="existingImages" data-recipe-images="<%= JSON.stringify(recipe.images) %>" class="mb-3">
                    </div>
                    <div class="mb-3">
                        <label class="form-label" for="fileInput">Add new images:</label>
                        <input class="form-control" type="file" id="fileInput" name="recipe[images]" multiple>
                        <div id="imagesValidation">
                            <!-- Images Validation messages will be displayed here -->
                        </div>
                    </div>
                    <div class="row row-cols-1 row-cols-lg-3 row-cols-md-2 g-4 mb-3" id="newImagesContainer"></div>
                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-danger" id="clearButton" id="clearButton"
                            style="display: none;" onclick="clearFileInput()">Clear new images</button>
                    </div>
                </div>

                <div class="my-3">
                    <div id="formMessage"></div>
                    <button class="btn btn-success col-12 col-lg-4 offset-lg-4 mt-3" type="submit">Update
                        Recipe</button>
                </div>
            </form>
            <a href="/recipes/<%= recipe._id %>">Back to Recipe</a>
        </div>
    </div>

    <script>


        document.addEventListener('DOMContentLoaded', () => {
            const fileInput = document.getElementById('fileInput');
            fileInput.addEventListener('change', (event) => {
                const existingImagesElement = document.getElementById('existingImages');
                const existingImagesString = existingImagesElement.getAttribute('data-recipe-images');
                const existingImages = JSON.parse(existingImagesString);
                previewImages(event, existingImages);
            });
        });

        function previewImages(event, existingImages) {
            const imageInput = event.target;
            const container = document.getElementById('newImagesContainer');
            const imageLength = existingImages.length;
            const formData = new FormData();

            container.innerHTML = '';

            if (imageInput.files && imageInput.files.length > 0) {
                for (let i = 0; i < imageInput.files.length; i++) {
                    const reader = new FileReader();
                    const file = imageInput.files[i];
                    const miniContainer = document.createElement('div');
                    miniContainer.classList.add('miniContainer');
                    miniContainer.innerHTML = `
                    <div class="card h-100">
                            <div class="card-body d-flex justify-content-center align-items-center h-75">
                                <img class="card-img img-thumbnail previewImage mx-auto">
                            </div>
                            <div class="card-body d-flex flex-column justify-content-end align-items-center">
                                <label class="form-label" name="altTextLabel[]" for="altText${imageLength + i}">Image ${imageLength + 1 + i} description:</label>
                                <input type="text" name="newAltText[${imageLength + i}]" id="altText${imageLength + i}" placeholder="Image description" maxlength="300" class="form-control" required>
                            </div>
                    </div>`;
                    container.appendChild(miniContainer);

                    reader.onload = function (e) {
                        const previewImage = miniContainer.querySelector('.previewImage');
                        previewImage.src = e.target.result;
                        formData.append(`image[${imageLength + i}]`, file);
                    };

                    reader.readAsDataURL(file);
                }
            }
            updateClearButtonVisibility();
            updateImageIndexes();
        }

        function clearFileInput() {
            const fileInput = document.getElementById('fileInput');
            fileInput.value = '';
            const newImagesContainer = document.getElementById('newImagesContainer');
            newImagesContainer.innerHTML = '';
            updateClearButtonVisibility();
            noImagesValidation();
        }

        function updateClearButtonVisibility() {
            const clearButton = document.getElementById('clearButton');
            const newImagesContainer = document.getElementById('newImagesContainer');
            clearButton.style.display = newImagesContainer.children.length ? 'flex' : 'none';
        }

        document.getElementById('newImagesContainer').addEventListener('change', updateClearButtonVisibility);
        const checkboxes = document.querySelectorAll('.btn-check');
        const deleteImages = [];

        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function () {
                const filename = this.value;
                const miniContainer = this.closest('.miniContainer');
                if (this.checked) {
                    deleteImages.push(filename);
                    miniContainer.remove();
                    updateImageIndexes();
                } else {
                    const index = deleteImages.indexOf(filename);
                    if (index !== -1) {
                        deleteImages.splice(index, 1);
                    }
                }
            });
        });


        function createDeletedImageHiddenInputs() {
            const form = document.querySelector('#recipeForm');
            deleteImages.forEach(filename => {
                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = 'deleteImages[]';
                hiddenInput.value = filename;

                form.appendChild(hiddenInput);
            });
        }
        function updateImageIndexes() {
            const labels = document.querySelectorAll('[name^="altTextLabel["]');
            const inputs = document.querySelectorAll('[name^="altText["]');
            const newInputs = document.querySelectorAll('[name^="newAltText["]');
            const checkboxes = document.querySelectorAll('.card .card-body input[type="checkbox"]');
            const deleteImageButtons = document.querySelectorAll('label[name="deleteImageButton"]');
            const cardHolder = document.querySelector('#cardHolder');

            labels.forEach((label, index) => {
                label.textContent = `Image ${index + 1} description:`;
                label.setAttribute('for', `altText${index}`);
            });

            inputs.forEach((input, index) => {
                input.name = `altText[${index}]`;
                input.id = `altText${index}`
            })

            newInputs.forEach((input, index) => {
                input.name = `newAltText[${index}]`;
                input.id = `altText${cardHolder.children.length + index}`
            })

            checkboxes.forEach((checkbox, index) => {
                checkbox.id = `image-${index}`;
            });

            deleteImageButtons.forEach((button, index) => {
                button.setAttribute('for', `image-${index}`);
            });


        }

        UpdateHiddenInput();

        function UpdateHiddenInput() {
            const selectedSystem = document.getElementById('preferredSystem').value;
            document.getElementById('measurementSystemHidden').value = selectedSystem
        }

        document.addEventListener('DOMContentLoaded', () => {
            const preferredSystem = document.getElementById('preferredSystem').value;

            if (preferredSystem === 'metric') {
                const metricIngredientsData = document.getElementById('metricIngredients').dataset.metricRecipeIngredients;
                const metricIngredients = JSON.parse(metricIngredientsData);
                metricIngredients.forEach(ingredientData => {
                    addIngredient(ingredientData);
                });
            } else {
                const imperialIngredientsData = document.getElementById('imperialIngredients').dataset.imperialRecipeIngredients;
                const imperialIngredients = JSON.parse(imperialIngredientsData);
                imperialIngredients.forEach(ingredientData => {
                    addIngredient(ingredientData);
                });
            }
        });

        let ingredientIndex = 0;
        function addIngredient(ingredientData = {}) {
            const container = document.getElementById('ingredientsContainer');
            const ingredientInputs = document.createElement('div');
            const preferredSystem = document.getElementById('preferredSystem');
            const metricUnits = [{ value: null, text: '-' },
            { value: "l", text: "liters" },
            { value: "g", text: "grams", },
            { value: "ml", text: "milliliters" },
            { value: "kg", text: "kilograms" },
            { value: "tsp", text: "teaspoons" },
            { value: "Tbs", text: "tablespoons" },
            { value: "cup", text: "cups" },
            { value: "mg", text: "milligrams" },
            ];
            const imperialUnits = [{ value: null, text: '-' },
            { value: "gal", text: "gallons" },
            { value: "oz", text: "ounces" },
            { value: "tsp", text: "teaspoons" },
            { value: "Tbs", text: "tablespoons" },
            { value: "cup", text: "cups" },
            { value: "qt", text: "quarts" },
            { value: "fl-oz", text: "fluid ounces" },
            { value: "lb", text: "pounds" },
            ];

            ingredientInputs.innerHTML = `
            <div class="list-group-item">
                <div class="row g-1 ingredient">
                    <div class="col-12 col-lg-2 col-xl-1 text-sm-start text-lg-end">
                        <label class="form-label mt-2" for="ingredientAmount${ingredientIndex}">Amount:</label>
                    </div>
                    <div class="col-12 col-lg-3 col-xl-2">
                        <input class="form-control" type="number" step="any" min="0" placeholder="-" id="ingredientAmount${ingredientIndex}" name="recipe[ingredients][${ingredientIndex}][amount]" value="${ingredientData.amount || ''}">
                    </div>
                    <div class="col-12 col-lg-3 col-xl-1 text-sm-start text-lg-end">
                        <label class="form-label mt-2" for="ingredientUnit${ingredientIndex}">Unit:</label>
                    </div>
                    <div class="col-12 col-lg-4 col-xl-2">
                        <select class="form-select" id="ingredientUnit${ingredientIndex}" name="recipe[ingredients][${ingredientIndex}][measurementShorthand]">
                        ${preferredSystem.value === 'metric' ? metricUnits.map(unit => `<option value="${unit.value}" ${unit.value === ingredientData.measurementShorthand ? 'selected' : ''}>${unit.text}</option>`) :
                    imperialUnits.map(unit => `<option value="${unit.value}" ${unit.value === ingredientData.measurementShorthand ? 'selected' : ''}>${unit.text}</option>`)}
                        </select>
                    </div>
                    <div class="col-12 col-lg-3 col-xl-2 text-sm-start text-lg-end">
                        <label class="form-label mt-2" for="ingredientName${ingredientIndex}">Ingredient name:</label>
                    </div>
                    <div class="col-12 col-lg-5 col-xl-3">
                        <input class="form-control text-lowercase" type="text" id="ingredientName${ingredientIndex}" name="recipe[ingredients][${ingredientIndex}][ingredientName]" value="${ingredientData.ingredientName || ''}" required>
                    </div>
                    <div class= "col-12 col-lg-2 col-xl-1 mt-3 mt-md-1">
                        <button type="button" class="btn btn-danger" style="width: 100%;" onclick="deleteIngredient(this.parentNode.parentNode.parentNode); resetMeasurementSystem()">Delete</button>
                    </div>
                </div>
            </div>
            `;
            container.appendChild(ingredientInputs);
            disableMeasurementSystem();
            ingredientIndex++;
            updateIngredientIndexes()
        }

        function getIngredients() {
            return Array.from(document.querySelectorAll('.ingredient'));
        }

        function updateIngredientIndexes() {
            const amountInputs = document.querySelectorAll('input[name^="recipe[ingredients]"][name$="[amount]"]');
            const unitSelects = document.querySelectorAll('select[name^="recipe[ingredients]"][name$="[measurementShorthand]"]');
            const nameInputs = document.querySelectorAll('input[name^="recipe[ingredients]"][name$="[ingredientName]"]');
            const labelForAmounts = document.querySelectorAll('label[for^="ingredientAmount"]');
            const labelForUnits = document.querySelectorAll('label[for^="ingredientUnit"]');
            const labelForNames = document.querySelectorAll('label[for^="ingredientName"]');

            amountInputs.forEach((amountInput, index) => {
                amountInput.id = `ingredientAmount${index}`;
                amountInput.name = `recipe[ingredients][${index}][amount]`;
            });

            unitSelects.forEach((unitSelect, index) => {
                unitSelect.id = `ingredientUnit${index}`;
                unitSelect.name = `recipe[ingredients][${index}][measurementShorthand]`;
            });

            nameInputs.forEach((nameInput, index) => {
                nameInput.id = `ingredientName${index}`;
                nameInput.name = `recipe[ingredients][${index}][ingredientName]`;
            });

            labelForAmounts.forEach((labelForAmount, index) => {
                labelForAmount.setAttribute('for', `ingredientAmount${index}`);
            });

            labelForUnits.forEach((labelForUnit, index) => {
                labelForUnit.setAttribute('for', `ingredientUnit${index}`);
            });

            labelForNames.forEach((labelForName, index) => {
                labelForName.setAttribute('for', `ingredientName${index}`);
            });
        }

        function deleteIngredient(button) {
            const ingredientToRemove = button.parentNode;
            const ingredients = Array.from(document.querySelectorAll('.ingredient'));

            const deletedIndex = ingredients.indexOf(ingredientToRemove);

            ingredients.splice(deletedIndex, 1);
            ingredientToRemove.remove();

            updateIngredientIndexes();
        }

        function disableMeasurementSystem() {
            const ingredientsContainer = document.getElementById('ingredientsContainer');
            const preferredSystem = document.getElementById('preferredSystem');
            if (ingredientsContainer.children.length > 0) {
                preferredSystem.disabled = true;
            }
        }

        function resetMeasurementSystem() {
            const ingredientsContainer = document.getElementById('ingredientsContainer');
            const measureSystemSelect = document.getElementById('preferredSystem');
            if (ingredientsContainer.children.length === 0) {
                measureSystemSelect.disabled = false;
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            const container = document.getElementById('stepsContainer');
            if (container) {
                const recipeMethodElement = document.getElementById('recipeMethod');
                if (recipeMethodElement) {
                    const recipeMethodString = recipeMethodElement.getAttribute('data-recipe-method');
                    const recipeMethod = JSON.parse(recipeMethodString);

                    recipeMethod.forEach(step => {
                        addStep(step);
                    });
                }
            }
        });

        let stepIndex = 0;
        function addStep(stepText = '') {
            const container = document.getElementById('stepsContainer');
            const stepInput = document.createElement('div');
            stepInput.innerHTML = `
                <div class="row mb-2">
                    <div class="col-12 col-xl-1">
                        <label class="form-label mt-2" for="recipeMethod${stepIndex}">Step ${stepIndex + 1}:</label>
                    </div>
                    <div class="col-12 col-xl-10">
                        <textarea class="form-control" id="recipeMethod${stepIndex}" name="recipe[method][${stepIndex}]" rows="1" cols="50" required>${stepText}</textarea>
                    </div>
                    <div class="col-xl-1">
                        <button type="button" class="btn btn-danger float-end mt-2 mt-xl-0" onclick="deleteStep(this.parentNode.parentNode)">Delete</button>
                    </div>
                </div>
            `;
            container.appendChild(stepInput);
            stepIndex++;
        }

        function deleteStep(button) {
            const container = document.getElementById('stepsContainer');
            const steps = Array.from(container.children);
            const deletedIndex = steps.indexOf(button.parentNode);
            button.parentNode.remove();
            updateStepNumbers(deletedIndex);
        }

        function updateStepNumbers(deletedIndex) {
            const container = document.getElementById('stepsContainer');
            const steps = Array.from(container.children);
            steps.forEach((step, index) => {
                const label = step.querySelector('label');
                const textarea = step.querySelector('textarea');
                label.textContent = `Step ${index + 1}:`;
                label.setAttribute('for', `recipeMethod${index}`);
                textarea.id = `recipeMethod${index}`;
                textarea.name = `recipe[method][${index}]`;
            });
            if (deletedIndex !== undefined) {
                stepIndex = steps.length;
            }
        }

        function validatePreparationTime() {
            const prepHours = document.getElementById('prepHours').value;
            const prepMinutes = document.getElementById('prepMinutes').value;
            const prepTimeValidation = document.getElementById('prepTimeValidation');

            if (prepHours === '' && prepMinutes === '') {
                document.getElementById('prepHours').required = true;
                document.getElementById('prepMinutes').required = true;
                const invalidMessage = createMessage('invalidMessage', 'text-danger', 'Please provide a preparation time');
                prepTimeValidation.innerHTML = '';
                prepTimeValidation.appendChild(invalidMessage);
                return false;
            } else {
                document.getElementById('prepHours').required = false;
                document.getElementById('prepMinutes').required = false;

                const validMessage = createMessage('validMessage', 'text-success', 'Looks good!');
                prepTimeValidation.innerHTML = '';
                prepTimeValidation.appendChild(validMessage);
                return true;
            }
        }

        function validateIngredients() {
            const ingredientsContainer = document.getElementById('ingredientsContainer')
            const ingredientsValidation = document.getElementById('ingredientsValidation');
            if (ingredientsContainer.childElementCount === 0) {
                const invalidMessage = createMessage('invalidMessage', 'text-danger', 'Please add at least one ingredient to your recipe');
                ingredientsValidation.innerHTML = '';
                ingredientsValidation.appendChild(invalidMessage);
                return false;
            } else {
                ingredientsValidation.innerHTML = '';
                return true;
            }
        }

        function validateMethod() {
            const stepsContainer = document.getElementById('stepsContainer')
            const methodValidation = document.getElementById('methodValidation');
            if (stepsContainer.childElementCount === 0) {
                const invalidMessage = createMessage('invalidMessage', 'text-danger', 'Please add at least one step to your recipe method');
                methodValidation.innerHTML = '';
                methodValidation.appendChild(invalidMessage);
                return false;
            } else {
                methodValidation.innerHTML = '';
                return true;
            }
        }

        function createMessage(id, className, text) {
            const message = document.createElement('div');
            message.setAttribute('id', id);
            message.classList.add(className);
            message.innerHTML = `<small>${text}</small>`;
            return message;
        }

        function checkRequiredFields(form) {
            const requiredInputs = form.querySelectorAll('input[required], select[required], textarea[required]');
            for (const input of requiredInputs) {
                if (!input.value.trim()) {
                    return false;
                }
            }
            return true;
        }


        document.addEventListener('DOMContentLoaded', function () {
            const prepHours = document.getElementById('prepHours');
            const prepMinutes = document.getElementById('prepMinutes');
            const ingredientsContainer = document.getElementById('ingredientsContainer')
            const stepsContainer = document.getElementById('stepsContainer')
            const recipeForm = document.getElementById('recipeForm');
            let formSubmitted = false;
            recipeForm.addEventListener('submit', function () { formSubmitted = true });
            let isErrorMessageDisplayed = false;

            function validateAndPreventSubmission(event) {
                validatePreparationTime();
                validateIngredients();
                validateMethod();
                checkRequiredFields(recipeForm);
                if ((!validatePreparationTime()) || (!validateIngredients()) || (!validateMethod()) || (!checkRequiredFields(recipeForm))) {
                    event.preventDefault();
                    if (!isErrorMessageDisplayed) {
                        isErrorMessageDisplayed = true;
                        const formMessageContainer = document.getElementById('formMessage');
                        const errorMessage = createMessage('invalidMessage', 'text-danger', 'Oups! Looks like something is missing, please have a look above ‚ù§Ô∏è‚Äçü©π');
                        errorMessage.className = 'fade-out-message text-center';
                        formMessageContainer.appendChild(errorMessage);
                        void errorMessage.offsetWidth;
                        setTimeout(() => {
                            errorMessage.classList.add('fade-out');
                            setTimeout(() => {
                                errorMessage.remove();
                                isErrorMessageDisplayed = false;
                            }, 1000);
                        }, 6000);
                    }
                }
            }

            prepHours.addEventListener('change', function () {
                if (formSubmitted) {
                    validatePreparationTime();
                }
            });

            prepMinutes.addEventListener('change', function () {
                if (formSubmitted) {
                    validatePreparationTime();
                }
            });

            const observer = new MutationObserver(function (mutationsList, observer) {
                for (const mutation of mutationsList) {
                    if (mutation.type === 'childList' && formSubmitted) {
                        validateIngredients();
                        validateMethod();
                    }
                }
            });

            const observerConfig = { childList: true };

            observer.observe(ingredientsContainer, observerConfig);
            observer.observe(stepsContainer, observerConfig);

            recipeForm.addEventListener('submit', function (event) {
                validateAndPreventSubmission(event);
                createDeletedImageHiddenInputs();
            });
        });


        document.addEventListener('DOMContentLoaded', () => {
            const fileInput = document.getElementById('fileInput');
            const imagesValidation = document.getElementById('imagesValidation');
            const maxImages = 10;
            const maxImageSizeBytes = 1000000; // Maximum image size in bytes (1 MB)
            const allowedExtensions = ['jpeg', 'jpg', 'png']; // Allowed file extensions

            fileInput.addEventListener('change', (event) => {
                const files = event.target.files;
                const totalImages = files.length + Array.from(document.querySelectorAll('#existingImagesContainer input[type="checkbox"]'))
                    .filter(checkbox => !checkbox.checked)
                    .length;
                let totalSize = 0;
                let valid = true;
                imagesValidation.innerHTML = '';

                // Check the number of files
                if (totalImages > maxImages) {
                    const invalidMessage = createMessage('invalidMessage', 'text-danger', `You can upload a maximum of ${maxImages} images for your recipe.`);
                    imagesValidation.appendChild(invalidMessage);
                    valid = false;
                }

                // Check the size and type of each file
                for (let i = 0; i < files.length; i++) {
                    const file = files[i];
                    totalSize += file.size;

                    // Check file size
                    if (file.size > maxImageSizeBytes) {
                        const invalidMessage = createMessage('invalidMessage', 'text-danger', `File "${file.name}" exceeds the maximum size of 1MB. Please choose another image or try compress your image at https://compressjpeg.com/ `);
                        imagesValidation.innerHTML = '';
                        imagesValidation.appendChild(invalidMessage);
                        valid = false;
                    }

                    // Check file type (extension)
                    const fileExtension = file.name.split('.').pop().toLowerCase();
                    if (!allowedExtensions.includes(fileExtension)) {
                        const invalidMessage = createMessage('invalidMessage', 'text-danger', `"${file.name}" is an invalid file type. Please make sure your images are one of the following: jpeg, jpg, png`);
                        imagesValidation.innerHTML = '';
                        imagesValidation.appendChild(invalidMessage);
                        valid = false;
                    }
                }

                // If any validation failed, clear the file input
                if (!valid) {
                    clearFileInput()
                }
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            const checkboxes = document.querySelectorAll('#existingImagesContainer input[type="checkbox"]');
            const fileInput = document.getElementById('fileInput');

            checkboxes.forEach(function (checkbox) {
                checkbox.addEventListener('change', noImagesValidation);
            });

            fileInput.addEventListener('change', noImagesValidation);
        });


        function noImagesValidation() {
            const existingImagesContainer = document.getElementById('existingImagesContainer');
            const checkboxes = existingImagesContainer.querySelectorAll('input[type="checkbox"]');
            const files = document.getElementById('fileInput').files;

            let allChecked = true;

            checkboxes.forEach(function (checkbox) {
                if (!checkbox.checked) {
                    allChecked = false;
                    return;
                }
            });

            const imagesValidation = document.getElementById('imagesValidation');

            if (allChecked && files.length === 0) {
                const invalidMessage = createMessage('invalidMessage', 'text-danger', 'There must be at least one image for this recipe (maximum size: 1MB, file type: jpeg, jpg, png)');
                imagesValidation.innerHTML = '';
                imagesValidation.appendChild(invalidMessage);
                fileInput.required = true;
            } else if (imagesValidation.innerHTML.trim() === '') {
                imagesValidation.innerHTML = '';
                fileInput.required = false;
            }
        }

    </script>

    <style>
        .previewImage {
            max-width: 200px;
            max-height: 300px;
        }

        .fade-out-message {
            opacity: 1;
            transition: opacity 1s ease-in-out;
            color: red;
            font-weight: bold;
        }

        .fade-out-message.fade-out {
            opacity: 0;
        }
    </style>